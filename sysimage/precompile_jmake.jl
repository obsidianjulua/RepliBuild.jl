#!/usr/bin/env julia
# Precompilation statements for RepliBuild
# This file helps PackageCompiler.jl create an optimized sysimage

println("Running RepliBuild precompilation...")

# Import core modules to force compilation
using RepliBuild
using RepliBuild.ConfigurationManager
using RepliBuild.LLVMEnvironment
using RepliBuild.Discovery
using RepliBuild.BuildBridge
using RepliBuild.UXHelpers
using RepliBuild.ErrorLearning
using RepliBuild.Templates

# Test core API functions
try
    println("  ‚Ä¢ Testing LLVMEnvironment...")
    # Initialize LLVM toolchain (critical for all operations)
    toolchain = LLVMEnvironment.get_toolchain()
    println("    ‚úì LLVM toolchain initialized: $(toolchain.source)")

    # Verify toolchain is functional
    LLVMEnvironment.verify_toolchain()
    println("    ‚úì LLVM toolchain verified")

    println("  ‚Ä¢ Testing ConfigurationManager...")
    # Test configuration loading/creation
    mktempdir() do tmpdir
        config_path = joinpath(tmpdir, "replibuild.toml")
        config = ConfigurationManager.create_default_config(config_path)
        println("    ‚úì Default config created")

        # Test config accessors
        ConfigurationManager.get_include_dirs(config)
        ConfigurationManager.get_source_files(config)
        ConfigurationManager.is_stage_enabled(config, :compile)
        println("    ‚úì Config accessors tested")
    end

    println("  ‚Ä¢ Testing Templates...")
    # Test template system
    Templates.list_templates()
    println("    ‚úì Templates loaded")

    println("  ‚Ä¢ Testing BuildBridge...")
    # Test tool discovery
    BuildBridge.discover_llvm_tools()
    println("    ‚úì LLVM tools discovered")

    println("  ‚Ä¢ Testing ErrorLearning...")
    # Test error learning initialization
    mktempdir() do tmpdir
        db_path = joinpath(tmpdir, "test_errors.db")
        db = ErrorLearning.init_db(db_path)
        println("    ‚úì Error learning DB initialized")
    end

    println("\n‚úÖ All precompilation statements executed successfully")
    println("üìä Precompiled modules:")
    println("   ‚Ä¢ RepliBuild core")
    println("   ‚Ä¢ ConfigurationManager")
    println("   ‚Ä¢ LLVMEnvironment")
    println("   ‚Ä¢ Discovery")
    println("   ‚Ä¢ BuildBridge")
    println("   ‚Ä¢ ErrorLearning")
    println("   ‚Ä¢ Templates")
    println("   ‚Ä¢ UXHelpers")

catch e
    @warn "Some precompilation statements failed" exception=(e, catch_backtrace())
    println("‚ö†Ô∏è  Precompilation completed with warnings (this may be OK)")
end
