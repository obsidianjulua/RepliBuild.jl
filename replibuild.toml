# ============================================================================
# RepliBuild Configuration Reference
# ============================================================================
# This is a comprehensive reference showing ALL available configuration options.
# Most fields have sensible defaults - only override what you need.
#
# Configuration is read by ConfigurationManager.jl and used throughout the build pipeline.
# See src/ConfigurationManager.jl for implementation details.

# ============================================================================
# [project] - Project Metadata
# ============================================================================
[project]
name = "MyProject"              # Project name (auto-detected from directory)
root = "."                       # Project root directory (absolute or relative)
uuid = "00000000-0000-0000-0000-000000000000"  # Auto-generated UUID (leave empty for auto-gen)

# ============================================================================
# [discovery] - File Scanning & Dependency Walking Stage
# Used by: Discovery.jl, ASTWalker.jl
# ============================================================================
[discovery]
enabled = true                   # Enable discovery stage
scan_recursive = true            # Recursively scan subdirectories
max_depth = 10                   # Maximum recursion depth
exclude_dirs = [                 # Directories to skip
    "build",
    ".git",
    ".cache",
    "node_modules",
    ".replibuild_cache"
]
follow_symlinks = false          # Whether to follow symbolic links
parse_ast = true                 # Parse C/C++ AST for function signatures
walk_dependencies = true         # Walk #include dependencies with clang
log_all_files = true             # Log all discovered files

# Auto-populated by discovery (don't manually edit):
# completed = true
# timestamp = "2025-01-01T12:00:00"
# files = { cpp_sources = [...], cpp_headers = [...], ... }
# binaries = { executables = [...], static_libs = [...], shared_libs = [...] }
# include_dirs = ["/abs/path/to/include", ...]
# dependency_graph_file = ".replibuild_cache/dependency_graph.json"

# ============================================================================
# [reorganize] - Optional File Organization Stage
# Used by: (future reorganization module)
# ============================================================================
[reorganize]
enabled = false                  # Disabled by default (optional stage)
create_structure = true          # Create organized directory structure
sort_by_type = true              # Sort files by type
preserve_hierarchy = false       # Preserve original directory hierarchy

[reorganize.target_structure]
cpp_sources = "src"
cpp_headers = "include"
c_sources = "src"
c_headers = "include"
julia_files = "julia"
config_files = "config"
docs = "docs"

# ============================================================================
# [compile] - C/C++ → LLVM IR Compilation Stage
# Used by: LLVMake.jl, compilation_daemon.jl, BuildBridge.jl
# ============================================================================
[compile]
enabled = true                   # Enable compilation stage
output_dir = "build/ir"          # Where to write LLVM IR files
flags = [                        # Compiler flags passed to clang++
    "-std=c++17",
    "-fPIC",
    "-O2"
]
include_dirs = []                # Include directories (populated by discovery)
defines = {}                     # Preprocessor defines: { "KEY" = "value" }
emit_ir = true                   # Emit LLVM IR (.ll files)
emit_bc = false                  # Emit LLVM bitcode (.bc files)
parallel = true                  # Compile files in parallel

# Auto-populated during build (don't manually edit):
# source_files = ["src/file1.cpp", "src/file2.cpp", ...]

# ============================================================================
# [link] - LLVM IR Linking & Optimization Stage
# Used by: compilation_daemon.jl (link_ir function)
# ============================================================================
[link]
enabled = true                   # Enable linking stage
output_dir = "build/linked"      # Where to write linked IR
optimize = true                  # Run optimization passes
opt_level = "O2"                 # Optimization level: O0, O1, O2, O3, Os, Oz
opt_passes = []                  # Custom opt passes (empty = default)
lto = false                      # Enable Link-Time Optimization

# ============================================================================
# [binary] - Shared Library Creation Stage
# Used by: compilation_daemon.jl (create_shared_library function)
# ============================================================================
[binary]
enabled = true                   # Enable binary creation stage
output_dir = "julia"             # Where to write shared library
library_name = ""                # Library name (auto: "lib{project}.so")
library_type = "shared"          # "shared" or "static"
link_libraries = []              # External libraries to link: ["pthread", "dl"]
rpath = true                     # Add rpath to library

# ============================================================================
# [symbols] - Symbol Extraction & Analysis Stage
# Used by: (future symbol extraction module)
# ============================================================================
[symbols]
enabled = true                   # Enable symbol extraction
method = "nm"                    # Tool to use: "nm", "objdump", "llvm-nm"
demangle = true                  # Demangle C++ symbols
filter_internal = true           # Filter out internal symbols
export_list = true               # Generate export list

# ============================================================================
# [wrap] - Julia Wrapper Generation Stage
# Used by: JuliaWrapItUp.jl
# ============================================================================
[wrap]
enabled = true                   # Enable wrapper generation
output_dir = "julia"             # Where to write Julia files
style = "auto"                   # "auto", "basic", "advanced", "clangjl"
module_name = ""                 # Module name (auto: TitleCase(project))
add_tests = true                 # Generate test suite
add_docs = true                  # Generate documentation

[wrap.type_mappings]
# C++ → Julia type mappings (customize as needed):
"std::string" = "String"
"std::vector<double>" = "Vector{Float64}"
"std::vector<int>" = "Vector{Int32}"

# ============================================================================
# [test] - Testing & Verification Stage
# Used by: (future test runner)
# ============================================================================
[test]
enabled = false                  # Disabled by default
test_dir = "test"                # Test directory
run_tests = false                # Automatically run tests after build

# ============================================================================
# [llvm] - LLVM Toolchain Configuration
# Used by: LLVMEnvironment.jl
# Priority: TOML config > LLVM_full_assert_jll > in-tree LLVM > system LLVM
# ============================================================================
[llvm]
root = ""                        # LLVM installation root (auto-detected if empty)
source = ""                      # "intree", "jll", "system", "custom" (auto if empty)
use_replibuild_llvm = true       # Prefer RepliBuild's in-tree LLVM
isolated = true                  # Use isolated environment (recommended)

[llvm.tools]
# Auto-discovered tools (populated by init_toolchain)
# Manual override example:
# clang = "/usr/bin/clang-20"
# "clang++" = "/usr/bin/clang++-20"
# "llvm-config" = "/usr/bin/llvm-config-20"

# ============================================================================
# [target] - Target Architecture Configuration
# Used by: LLVMake.jl, compilation_daemon.jl
# ============================================================================
[target]
triple = ""                      # Target triple (empty = host)
cpu = "generic"                  # Target CPU: "generic", "native", "x86-64", etc.
features = []                    # CPU features: ["+avx2", "+fma", "+sse4.2"]

# ============================================================================
# [workflow] - Build Pipeline Orchestration
# Used by: RepliBuild.jl main build functions
# ============================================================================
[workflow]
stages = [                       # Build stages to execute (in order)
    "discovery",
    "compile",
    "link",
    "binary",
    "symbols",
    "wrap"
]
stop_on_error = true             # Stop pipeline on first error
parallel_stages = ["compile"]    # Stages that support parallelization

# ============================================================================
# [cache] - Build Artifact Caching
# Used by: ConfigurationManager.jl
# ============================================================================
[cache]
enabled = true                   # Enable caching
directory = ".replibuild_cache"  # Cache directory
invalidate_on_change = true      # Invalidate on source/config changes
